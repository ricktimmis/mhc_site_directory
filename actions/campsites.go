package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"github.com/ricktimmis/mhclub/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Campsite)
// DB Table: Plural (campsites)
// Resource: Plural (Campsites)
// Path: Plural (/campsites)
// View Template Folder: Plural (/templates/campsites/)

// CampsitesResource is the resource for the Campsite model
type CampsitesResource struct {
	buffalo.Resource
}

// List gets all Campsites. This function is mapped to the path
// GET /campsites
func (v CampsitesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	campsites := &models.Campsites{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Campsites from the DB
	if err := q.All(campsites); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, campsites))
}

// Show gets the data for one Campsite. This function is mapped to
// the path GET /campsites/{campsite_id}
func (v CampsitesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Campsite
	campsite := &models.Campsite{}

	// To find the Campsite the parameter campsite_id is used.
	if err := tx.Find(campsite, c.Param("campsite_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, campsite))
}

// New renders the form for creating a new Campsite.
// This function is mapped to the path GET /campsites/new
func (v CampsitesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Campsite{}))
}

// Create adds a Campsite to the DB. This function is mapped to the
// path POST /campsites
func (v CampsitesResource) Create(c buffalo.Context) error {
	// Allocate an empty Campsite
	campsite := &models.Campsite{}

	// Bind campsite to the html form elements
	if err := c.Bind(campsite); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(campsite)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, campsite))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Campsite was created successfully")

	// and redirect to the campsites index page
	return c.Render(201, r.Auto(c, campsite))
}

// Edit renders a edit form for a Campsite. This function is
// mapped to the path GET /campsites/{campsite_id}/edit
func (v CampsitesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Campsite
	campsite := &models.Campsite{}

	if err := tx.Find(campsite, c.Param("campsite_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, campsite))
}

// Update changes a Campsite in the DB. This function is mapped to
// the path PUT /campsites/{campsite_id}
func (v CampsitesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Campsite
	campsite := &models.Campsite{}

	if err := tx.Find(campsite, c.Param("campsite_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Campsite to the html form elements
	if err := c.Bind(campsite); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(campsite)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, campsite))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Campsite was updated successfully")

	// and redirect to the campsites index page
	return c.Render(200, r.Auto(c, campsite))
}

// Destroy deletes a Campsite from the DB. This function is mapped
// to the path DELETE /campsites/{campsite_id}
func (v CampsitesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Campsite
	campsite := &models.Campsite{}

	// To find the Campsite the parameter campsite_id is used.
	if err := tx.Find(campsite, c.Param("campsite_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(campsite); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Campsite was destroyed successfully")

	// Redirect to the campsites index page
	return c.Render(200, r.Auto(c, campsite))
}
